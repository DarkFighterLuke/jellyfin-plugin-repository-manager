import os
import json

import pytest
from click.testing import CliRunner
from py._path.local import LocalPath
from testfixtures import compare, LogCapture
import jprm

from .test_repo import TEST_DATA_DIR


@pytest.mark.datafiles(
    os.path.join(TEST_DATA_DIR, "pluginA_1.0.0.zip"),
    os.path.join(TEST_DATA_DIR, "manifest_pluginA.json"),
)
@pytest.mark.parametrize(
    "url",
    [
        "http://example.org/plugins/pluginA_1.0.0.zip",
        "https://example.org/pluginA.zip",
        "https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
        "ipfs://Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu",
        "ipfs://bafybeiemxf5abjwjbikoz4mc3a3dla6ual3jsgpdr4cjr3oz3evfyavhwq/wiki/Vincent_van_Gogh.html",
    ],
)
def test_repo_add(
    url: str,
    cli_runner: CliRunner,
    tmpdir: LocalPath,
    datafiles: LocalPath,
):
    manifest_file = tmpdir / "repo.json"
    result = cli_runner.invoke(
        jprm.cli, ["--verbosity=debug", "repo", "init", str(manifest_file)]
    )
    assert result.exit_code == 0

    manifest_a = json.load(datafiles / "manifest_pluginA.json")
    manifest_a[0]["versions"][0]["sourceUrl"] = url

    with LogCapture("jprm") as capture:
        cli_runner.invoke(
            jprm.cli,
            [
                "--verbosity=debug",
                "repo",
                "add",
                str(manifest_file),
                str(datafiles / "pluginA_1.0.0.zip"),
                "--plugin-url",
                url,
            ],
        )
        manifest = json.load(manifest_file)
        compare(manifest, manifest_a)

        capture.check_present(
            (
                "jprm",
                "INFO",
                f"Plugin url `{url}` overrides the autogenerated `/plugin-a/plugin-a_1.0.0.0.zip`.",
            ),
        )

    assert not (tmpdir / "plugin-a" / "plugin-a_1.0.0.0.zip").exists()
